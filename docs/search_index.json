[
["index.html", "papaja: Reproducible APA manuscripts with R Markdown Preface", " papaja: Reproducible APA manuscripts with R Markdown Frederik Aust 2016-11-24 Preface This book will be a manual for the R package papaja. It is currently in the process of being written; I’m publishing new sections of the book as I’m writing them. If you have suggestions for improvements or additional topics you would like to see covered, please let me know by opening an issue on GitHub or creating a pull request. papaja has not yet been submitted to CRAN because it is under active development. Currently, there are still a couple of loose ends we would like to tie up before we release the package to a larger audience. If you would like to contribute to speed up the process, have a look at the chapters Limitations and Future directions. If you are interested in reproducible research with R more generally, I recommend the books by Xie (2015) and Gandrud (2013). Furthermore, Stodden, Leisch, &amp; Peng (2014) give an overview of tools, practices, and plattforms to implement reproducible research. This manual is fully reproducible and was written in R (3.3.1, R Core Team, 2016) and the R-packages afex (0.16.1, Singmann, Bolker, Westfall, &amp; Aust, 2016), citr (0.2.0, Aust, 2016), DiagrammeR (0.8.4, Sveidqvist et al., 2016), dplyr (0.5.0, Wickham &amp; Francois, 2016), knitr (1.15.2, Xie, 2015), lme4 (1.1.12, Bates, Mächler, Bolker, &amp; Walker, 2015), lsmeans (2.23.5, Lenth, 2016), papaja (0.1.0.9456, Aust &amp; Barth, 2016), shiny (0.13.2.9004, Chang, Cheng, Allaire, Xie, &amp; McPherson, 2016), and wordcountaddin (0.1.0, Marwick, n.d.). ## Session info -------------------------------------------------------------- ## setting value ## version R version 3.3.1 (2016-06-21) ## system x86_64, darwin15.6.0 ## ui RStudio (0.99.903) ## language (EN) ## collate de_DE.UTF-8 ## tz Europe/Berlin ## date 2016-11-24 ## Packages ------------------------------------------------------------------ ## package * version date source ## assertthat 0.1 2013-12-06 CRAN (R 3.3.0) ## backports 1.0.4 2016-10-24 cran (@1.0.4) ## bookdown 0.2.5 2016-11-24 Github (rstudio/bookdown@8c1f89f) ## broom 0.4.1 2016-06-24 cran (@0.4.1) ## colorspace 1.2-6 2015-03-11 CRAN (R 3.3.0) ## curl 1.2 2016-08-13 CRAN (R 3.3.1) ## DBI 0.5 2016-08-11 CRAN (R 3.3.1) ## devtools 1.12.0 2016-06-24 CRAN (R 3.3.1) ## DiagrammeR * 0.8.4 2016-07-17 CRAN (R 3.3.1) ## digest 0.6.10 2016-08-02 cran (@0.6.10) ## dplyr 0.5.0 2016-06-24 cran (@0.5.0) ## evaluate 0.10 2016-10-11 cran (@0.10) ## formatR 1.4 2016-05-09 CRAN (R 3.3.0) ## git2r 0.15.0 2016-05-11 CRAN (R 3.3.1) ## highr 0.6 2016-05-09 CRAN (R 3.3.0) ## htmltools 0.3.5 2016-03-21 CRAN (R 3.3.0) ## htmlwidgets 0.7 2016-08-02 CRAN (R 3.3.1) ## httpuv 1.3.3 2015-08-04 cran (@1.3.3) ## httr 1.2.1 2016-07-03 cran (@1.2.1) ## igraph 1.0.1 2015-06-26 CRAN (R 3.3.1) ## influenceR 0.1.0 2015-09-03 CRAN (R 3.3.1) ## jsonlite 1.1 2016-09-14 cran (@1.1) ## knitr 1.15.2 2016-11-24 Github (yihui/knitr@0c5ace6) ## lattice 0.20-33 2015-07-14 CRAN (R 3.3.1) ## magrittr 1.5 2014-11-22 CRAN (R 3.3.0) ## MBESS 4.0.0 2016-02-17 cran (@4.0.0) ## memoise 1.0.0 2016-01-29 CRAN (R 3.3.1) ## mime 0.5 2016-07-07 cran (@0.5) ## miniUI 0.1.1 2016-01-15 cran (@0.1.1) ## mnormt 1.5-4 2016-03-09 CRAN (R 3.3.1) ## munsell 0.4.3 2016-02-13 CRAN (R 3.3.0) ## nlme 3.1-128 2016-05-10 CRAN (R 3.3.1) ## papaja * 0.1.0.9456 2016-11-24 Github (crsh/papaja@e969b7a) ## plyr 1.8.4 2016-06-08 cran (@1.8.4) ## png 0.1-7 2013-12-03 CRAN (R 3.3.1) ## psych 1.6.6 2016-06-28 cran (@1.6.6) ## R6 2.1.3 2016-08-19 CRAN (R 3.3.1) ## Rcpp 0.12.6 2016-07-19 CRAN (R 3.3.1) ## reshape2 1.4.1 2014-12-06 CRAN (R 3.3.0) ## rmarkdown 1.2 2016-11-21 cran (@1.2) ## rprojroot 1.1 2016-10-29 cran (@1.1) ## rsconnect 0.6 2016-11-21 cran (@0.6) ## rstudioapi 0.6 2016-06-27 CRAN (R 3.3.1) ## scales 0.4.0 2016-02-26 CRAN (R 3.3.0) ## shiny 0.13.2.9004 2016-08-03 Github (rstudio/shiny@1cc5e84) ## stringi 1.1.1 2016-05-27 CRAN (R 3.3.0) ## stringr 1.1.0 2016-08-19 cran (@1.1.0) ## tibble 1.2 2016-08-26 CRAN (R 3.3.1) ## tidyr 0.6.0 2016-08-12 CRAN (R 3.3.1) ## visNetwork 1.0.1 2016-06-20 CRAN (R 3.3.1) ## withr 1.0.2 2016-06-20 CRAN (R 3.3.1) ## xtable 1.8-2 2016-02-05 cran (@1.8-2) ## yaml 2.1.14 2016-11-12 cran (@2.1.14) References "],
["introduction.html", "1 Introduction 1.1 Motivation 1.2 Implementation 1.3 Alternatives 1.4 Getting started", " 1 Introduction papaja is short for ‘preparing APA journal articles’ and is the name of this R package designed to create fully reproducible journal articles that seamlessly fuse statistical analyses, simulations, and prose. A manuscript written with papaja can be thought of as an extensively commented analysis script ready for publication in a scientific journal. 1.1 Motivation APA style is one of the major style regimes in academia concerned with written scientific communication and is defined in the Publication Manual of the American Psychological Association (APA; American Psychological Association, 2010). Research in psychology and many fields other, including other social sciences, medicine, and public health is reported in APA style. If you want to publish psychological research, you will have to produce properly formatted APA style manuscripts. While the merits of standardizing scientific reporting are undisputed, mastering the currently 272 pages of Publication Manual’s style definitions puts an undeniable burden on authors. To simplify the writing process researchers have developed strategies to automate the implementation of APA style. The dominant approach to writing scientific reports in psychology is the use of common word processors such as Microsoft Word or Libre Office. Available APA style document templates set up page margins, line spacing, fonts, and related aspects of the manuscript. The format of citations and references can be automated by using references managers that integrate with the word processor, such as Zotero. Far less common in psychology, is the use of markup systems, such as LaTeX or Markdown. A key concept of markup systems is to separate style from content by means of document annotations. These annotations declare portions of text for example as title, section headings, or list items but, crucially, they are agnostic to what this means visually (e.g., &lt;emphasize&gt;text&lt;/emphasize&gt; instead of text). There are several advantages to this approach but, curcially for the present purpose, markup system compile plain text files to produce the final document. Critically, the compilation process is required for fully reproducible scientific reports. 1.1.1 Reproducible scientific reports Dynamic scientific reports fuse prose and simulation or analysis scripts (Gandrud, 2013; Xie, 2015). Each time a dynamic document is compiled, the scripts are executed anew and the results—statistics, tables, and figures—are recreated and inserted into the document. Thereby dynamic documents allow automated reporting of results, which is currently not possible with the prevalent use of Microsoft Word or Libre Office. Importantly, dynamic documents ensure that the results reported in the manuscript are free of rounding or transcription errors and correspond to the performed analyses. This is the reason why dynamic scientific reports are commonly refered to as reproducible scientific reports or reproducible reports. Thus, the term reproducibility here means that given a dataset and analysis script any analyst obtains the same statistical results (Asendorpf et al., 2013; Cacioppo, Kaplan, Krosnick, Olds, &amp; Dean, 2015). The importance of reproducibility was pinpointed by the U.S. National Science Foundation subcommittee on replicability in science: Reproducibility is a minimum necessary condition for a finding to be believable and informative. (p. 4, Cacioppo et al., 2015) Example of irreproducible research: http://www.nature.com/nm/journal/v13/n11/full/nm1107-1276b.html - RepoRts - Matlab-tool for reproducible analyses: http://link.springer.com/article/10.3758%2Fs13428-015-0616-x - kmr # Abstract papar: Create publication-ready manuscripts in R Recently, growing attention has been drawn to the large number of scientific findings that are not reproducible. One aspect of this worrisome state of affairs, which is not limited to the field of psychology, is non-reproducibility of statistical analyses and scientific computations. Given that raw data are available, the reproducibility of analyses should be considered a minimum standard for judging scientific claims (Peng, 2011). Two obvious reasons for non-reproducibility of analyses are (1) incorrect and (2) incomplete reporting of methods and statistics. A review of psychological journal articles found that 18% of the statistical results were reported incorrectly; these errors lead to incorrect inferences in 15% of surveyed articles (Bakker & Wicherts, 2011). Dynamic documents that merge report and analysis scripts are an effective way to avoid erronenous statistics in manuscripts (Gandrud, 2013). We introduce the R package 'papaja' that builds on the 'knitr' package allowing authors to use the easy-to-learn Markdown syntax to harness the typesetting-power of LaTeX. papaja-functions additionally ensures that all necessary statistics are reported to ensure reproducibility and facilitate future synthesis of results. J of the American Statistical Association appoints ‘reproducibility editors’ to assure code and data are shared https://t.co/BsdpwPtets papaja: Create publication-ready manuscripts in R Recently, growing attention has been drawn to the large number of scientific findings that are not reproducible. One aspect of this worrisome state of affairs, which is not limited to the field of psychology, is non-reproducibility of statistical analyses and scientific computations. Given that raw data are available, the reproducibility of analyses should be considered a minimum standard for judging scientific claims (Peng, 2011). Two obvious reasons for non-reproducibility of analyses are incorrect and incomplete reporting of methods and statistics. A review of psychological journal articles found that 18% of the statistical results were reported incorrectly; these errors lead to incorrect inferences in 15% of surveyed articles (Bakker & Wicherts, 2011). Dynamic documents that merge reports and analysis scripts are an effective way to avoid erroneous statistical reporting (Gandrud, 2013). We introduce 'papaja', a package for the R Statistical Environment (R Core Team, 2014) that provides a framework to create dynamic documents that adhere to APA guidelines. papaja is tailored to the needs of experimental psychologists: we supply convenience functions to report commonly used statistics in accordance with APA guidelines and in a way that ensures reproducibility of analyses and facilitates future synthesis of results. --> R Markdown has been suggested as one possible framework for reproducible analyses (???). papaja is a R-package in the making including a R Markdown template that can be used with (or without) RStudio to produce documents, which conform to the American Psychological Association (APA) manuscript guidelines (6th Edition). The package uses the document class apa6 and a .docx-reference file, so you can create PDF documents, or Word documents if you have to. Moreover, papaja supplies R-functions that facilitate reporting results of your analyses in accordance with APA guidelines. Markdown is a simple formatting syntax that can be used to author HTML, PDF, and MS Word documents (among others). In the following I will assume you have hopped onto the band wagon and know how to use R Markdown to conduct and comment your analyses. If this is not the case, I recommend you get to grips with R Markdown first. I use RStudio (which makes use of pandoc) to create my documents, but the general process works using any other text editor. 1.2 Implementation In this section we provide a quick overview of the software and the underlying design principles. Unless you are interested in these details it’s safe to skip this section. 1.2.1 Guiding principles In our development of this package our design decisions are based on two guiding principles: papaja documents are convertible. A central motivation for the development of the package was the experience that many (if not most) scientific journals in psychology require that the final version of a submitted manuscript be provided as a Microsoft Word or RTF document. We, thus, strive to employ solutions that work for both LaTeX and Word output formats even if it means that some of the functions are less versatile than they could be. papaja does not compute. The package is meant to facilitate writing reports and manuscripts in APA style; it is not meant to analyse data. Functions provided in this package do as little computing as possible to grant authors maximal analytic flexibility. Moreover, limiting the amount of computing done by the package facilitates package maintenance. While we are guided by these principles, they are guidelines rather than commandments and we deviate from them if necessary. For example, papaja functions do compute statistics that should be routinely reported according to APA guidelines, such as confidence intervals, if they are not provided in the analysis output objects. We, however, try to enable customization and replacement of these defaults whenever we can. 1.2.2 Document compilation It is important to note that papaja builds on several existing R packages, which in turn build on other software, to compile the final document. This layered software design grants the package its capabilities but it comes at a cost: When compilation of a papaja-document throws an error it may not be immediately obvious to an inexperienced user, which part of the process failed. We, thus, provide an overview of the compilation process and the software involved. The compilation process is outlined in Figure 1.1. As detailed in the R Markdown components section, an R Markdown document consists of three components: A YAML front matter that contains document meta data, prose written in markdown (and optionally LaTeX) syntax, and R code in so-called code chunks. Additionally, the R code contained in an R Markdown document usually accesses data that are either stored in a file on the computers hard drive or a database on the local network or internet. When the document is compiled either by calling rmarkdown::render() or by clicking the Knit-button in RStudio, the YAML front matter is parsed. Errors during this processing step are usually due to erroneous YAML syntax and start with Error in yaml::yaml.load(enc2utf8(string), ...) :. Next, the R code inside the R Markdown document is executed sequentially from top to bottom of the document and the resulting output is inserted into the document in markdown syntax. Any figures that are generated during the execution of the R code are stored to the hard drive and embedded into the markdown document. The R code is executed in a new R session with an empty workspace, no attached packages, and with the working directory set to the path of the R Markdown file. If any portion of the R code throws an error the compilation is aborted. In RStudio the debugger will point to the first line of the R code chunk that threw the error—not the exact line responsible for the error—and report the error message. R error messages usually start with Error:, for example, Error: Object 'experiment_data' not found. Figure 1.1: Process diagram illustrating the compilation of reproducible reports written with papaja. Boxes represent input files, diamonds represent compiling software, and ovals represent output files. Dashed components are either implicit (components of R Markdown files) or by default deleted after the compilation and, thus, invisible to the user. After the R code has been executed the bookdown document format pdf_document2() or word_document2(), respectively, provides functions that enable the cross-referencing syntax \\@ref() described in the Cross-referencing section. Incorrect use of the cross-referencing syntax typically does not interfere with the document compilation but is apparent from missing or incorrect cross-references in the compiled document, e.g. instead of a figure number the document may contain the figure handle such as . The result of this processing step is a pure markdown document containing only a YAML header, prose in markdown (and optionally LaTeX) syntax and rendered images in PDF, EPS, PNG, and TIFF formats at 300 dpi as set by apa6_pdf() or apa6_word(), respectively. The mardown document, images and an optional BiB(La)TeX file that contains bibliographic information are the input to the next processing step. rmarkdown::render() assambles a system call to pandoc that is supplemented by papaja to include a call to an additional filter and can be further customized by the user. pandoc parses the contents of the markdown file and translates it into an abstrac syntax tree (AST). The pandoc-citeproc filter is than applied to the AST to replace the citation markup by the citation text and insert a reference section. As detailed in the Citations section, pandoc-citeproc relies on the citation styles language (CSL), an XML-based specification of citation and bibliography formatting rules. Unfortunately, CSL does not support in-text citations. To overcome this limitation, pandoc-citeproc provides a separate syntax for in-text citations, which is based on the same CSL style. As a result the CSL APA6 style uses ampersands for all citations, including in-text citations, defying the APA citation style. That is why papaja provides an additional R-based filter that is applied to the AST to replace ampersands in in-text citations with the word and. After all filters have been applied to the AST pandoc converts the document into the target output format, that is, PDF or DOCX. To create DOCX-documents papaja provides a reference DOCX-file containing page setup and style definitions that pandoc uses to create the manuscript file. That is, pandoc translates the AST directly to the office open XML format. To create PDF-documents pandoc in turn relies on LaTeX, that is, pandoc translates the AST to a TeX-file based on a templated provided by papaja. The TeX-file template invokes the apa6 LaTeX document class [@???] and loads several additional LaTeX packages. pandoc then generates a system call to LaTeX to render the PDF document. During this processing step, that is, following the pandoc system calls, errors are due to failures of LaTeX to compile the TeX-file and usually start with !, for example, ! Undefined control sequence. or ! Missing $ inserted. 1.3 Alternatives Needless to say, not all journals require manuscripts to be prepared according to APA guidelines. Other journal templates for the rmarkdown package are available in the rticles package. It includes a set of templates for authoring of R related journal and conference submissions. papeR reportR &amp; apaStyle Sweave schoRsch (Pfister &amp; Janczyk, 2016) sigr 1.4 Getting started 1.4.1 Software requirements To use papaja you need to make sure the following software is installed on your computer: R 2.11.1 or later. pandoc 1.16 or later. If you work with RStudio (0.98.932 or later) pandoc should already be installed, otherwise install pandoc using the instructions for your operating system If you want to create PDF- in addition to DOCX-files you need TeX 2013 or later. Try MikTeX for Windows, MacTeX for Mac, or TeX Live for Linux. Some Linux users may need a few additional TeX packages for the LaTeX document class apa6 to work: sudo apt-get install texlive texlive-publishers texlive-fonts-extra texlive-latex-extra texlive-humanities lmodern Although not necessary for the use of papaja, I recommend that you use a references manager, such as Zotero, to facilitate reference management and citations. 1.4.2 Installing papaja Once all that is taken care of, install papaja from GitHub. # Install devtools package if necessary if(!&quot;devtools&quot; %in% rownames(installed.packages())) install.packages(&quot;devtools&quot;) # Install papaja devtools::install_github(&quot;crsh/papaja&quot;) papaja has not yet been submitted to CRAN because it is under active development. Currently, there are still a couple of loose ends we would like to tie up before we release the package to a larger audience. If you would like to contribute to speed up the process, have a look at the chapters Limitations and Future directions. 1.4.3 Creating a document Once you have installed papaja and all other required software, the APA manuscript template is available through the RStudio menus when creating a new R Markdown file, Figure 1.3. Figure 1.3: papaja’s APA6 template is available through the RStudio menues. When you click RStudio’s Knit button (Figure 1.4) papaja, rmarkdown, and knitr work together to create an APA conform manuscript that includes both your manuscript text and the results of any embedded R code. Figure 1.4: The Knit button in the RStudio. If you don’t use RStudio, you can achieve the same result via the R command line. Use rmarkdown::draft() to create a new R Markdown file and rmarkdown::render() to render the document. # Create new R Markdown file rmarkdown::draft( &quot;mymanuscript.Rmd&quot; , &quot;apa6&quot; , package = &quot;papaja&quot; , create_dir = FALSE , edit = FALSE ) # Render manuscript rmarkdown::render(&quot;mymanuscript.Rmd&quot;) papaja is a R-package in the making including a R Markdown template that can be used with (or without) RStudio to produce documents, which conform to the American Psychological Association (APA) manuscript guidelines (6th Edition). The package uses the LaTeX document class apa6 and a .docx-reference file, so you can create PDF documents, or Word documents if you have to. Moreover, papaja supplies R-functions that facilitate reporting results of your analyses in accordance with APA guidelines. Because knitr does not allow duplicate chunk labels in a source document, you need to make sure there are no duplicate labels in your book chapters, otherwise knitr will signal an error when knitting the merged Rmd file. References "],
["r-markdown-components.html", "2 R Markdown components 2.1 YAML front matter 2.2 Body 2.3 Splitting an R Markdown document", " 2 R Markdown components Generally, R Markdown files consist of two parts. The first is the YAML front matter that contains the documents meta information and rendering options. It is located at the top of the R Markdown document. The second part is the main body that contains R code chunks and prose in Markdown format. 2.1 YAML front matter YAML is a human-readable and easy to write language to define data structures. You don’t need to familiarize yourself intimately with YAML to use R Markdown or papaja and I suggest you try to just use it. The following is the default YAML front matter. --- title : &quot;The title&quot; shorttitle : &quot;Title&quot; author: - name : &quot;First Author&quot; affiliation : &quot;1&quot; corresponding : yes # Define only one corresponding author address : &quot;Postal address&quot; email : &quot;my@email.com&quot; - name : &quot;Ernst-August Doelle&quot; affiliation : &quot;1,2&quot; affiliation: - id : &quot;1&quot; institution : &quot;Wilhelm-Wundt-University&quot; - id : &quot;2&quot; institution : &quot;Konstanz Business School&quot; author_note: &gt; Complete departmental affiliations for each author (note the indentation, if you start a new paragraph). Enter author note here. abstract: &gt; Enter abstract here (note the indentation, if you start a new paragraph). keywords : &quot;keywords&quot; wordcount : &quot;X&quot; bibliography : [&quot;r-references.bib&quot;] figsintext : no figurelist : no tablelist : no footnotelist : no lineno : yes lang : &quot;english&quot; class : &quot;man&quot; output : papaja::apa6_pdf --- 2.1.1 Manuscript meta data The title is the full name of the manuscript that is printed on the title page and at the beginning of the introduction. The shorttitle is a shortened variant of the title and will be printed in the running head on every page. author is a structured list. Each author’s information is given in a separate element that is indented and starts with -. A full name and an affiliation symbol need to be provided for every author. The symbol is later printed as superscript following the author’s name and can be a combination of multiple symbols if the author has multiple affiliations (e.g., Ernst-August Doelle1,2). Exactly one author has to be declared as corresponding author by adding corresponding: yes and the fields address and email to the author’s information. The latter two fields are used to automatically generate the last sentence of the author note giving the contact information of the corresponding author—as required by the APA guidelines—and is optional, that is, it will not be printed, for all other authors. affiliation is another structured list containing the institutions’ information; again each new element is indented and starts with -. The id is printed as superscript in front of the institution name below the author names on the title page (e.g., 2 Konstanz Business School). author_note and abstract contain the text for the corresponding sections of the manuscript. The &gt; indicates that all following indented lines are part of this field. Finally, keywords and wordcount1 are printed below the abstract. The bibliography field, contains a list of one or more Bib(La)TeX files containing the references cited in the manuscript. Additional files can be added by appending them to the list separated by commas, e.g. bibliography: [&quot;my_bib1.bib&quot;, &quot;my_bib2.bib&quot;]. By default, papaja assumes that you will cite R and all R packages used for the analysis contained in r-references.bib. See Citations for instructions on how to automate this. An additional field, that is not included in the default YAML front matter is note. The contents of this field is printed on title page below the author information and can be used to add remarks, such as “Preprint submitted on June, 29th, 2016”. 2.1.2 Rendering options The first set of rendering options breaks with the guiding principal is convertible; they have no effect on Word documents. I decided to implement these nonetheless because they are required by some journals and can be used for submissions where (initially) PDF documents are accepted. figsintext indicates whether figures and tables should included at the end of the document—as required by APA guidelines—or rendered in the body of the document. If figurelist, tablelist, or footnotelist are set to yes a list of figure captions, table captions, or footnotes is given following the reference section. lineno indicates whether lines should be continuously numbered through out the manuscript. The language of the manuscript is given in lang and affects automatically generated text, such as “Author note” on the title page or “Figure 1.” in figure captions. Currently, english and german are supported. class defines the layout style of the manuscript. Setting class to man produces the default APA manuscript style, doc produces a more typical document (single-spaced, single-column). The latter option is currently not available for Word documents. The output field determines the type of document that is created, either papaja::apa6_pdf or papaja::apa6_word. Additional arguments can be passed to these functions, e.g. to delete the TeX source file at the end of the rendering process. See ?apa6_pdf for details. output: papaja::apa6_pdf: keep_tex: FALSE Any additional rendering options supported by rmarkdown::pdf_document() or rmarkdown::word_document() can be added to the YAML front matter. If you, for example, need a different citation style, you can set csl to the path of a CSL style definition file. 2.2 Body The body of R Markdown documents consists of prose written in Markdown interspersed with R code. 2.2.1 Markdown A general principle in typesetting—be it on (digital) paper or the web—is to separate content and style. Separation is commonly achieved through the use of a markup language, which is a system of document annotations. These annotations declare portions of text as, for example, title, section headings, or list items but crucially, they are agnostic to what this means visually (e.g., text instead of text). Separation of content and tyle is useful because it enables swift changes to an entire documents’ style or structure. Word implements this strategy in their so-called styles, which are collections of formatting instructions that can be assigned to parts of the text. papaja uses Markdown [@???] to separate content and style. Markdown is intended to be an easy-to-read and -write formatting syntax. The key design goal was to create a syntax that is readable as-is. The following is an excerpt from the APA example manuscript written in Markdown. # Methods ## Participants Younger adults (14 women, 10 men, $M_{age} = 19.5$ years, age range: 18–22 years) were recruited with flyers posted on the Boston College campus. &lt;!-- Add flyer to appendix! --&gt; Older adults (15 women, nine men, $M_{age} = 76.1$ years, age range: 68–84 years) were recruited through the Harvard Cooperative on Aging (see Table 1, for demographics and test scores).[^p] [^p]: Analyses of covariance were conducted with these covariates, with no resulting influences of these variables on the pattern or magnitude of the results. Without knowing anything about Markdown, it should be easy to guess what the annotations mean. # declare hierarchical section headings, &lt;!-- and --&gt; envelope comments, and [^p] adds a reference to a footnote. A comprehensive overview of the supported Markdown syntax is provided by RStudio’s R Markdown documentation. The only thing that may be unexpected are the equations enveloped by $. Equations are written in the powerful mathematics syntax used in LaTeX (see also Equations). Although LaTeX is widely used to write entire manuscripts (not just equations), it is not very popular in the field of Psychology. I suspect that the neglect is largely due to its complexity and long learning curve, which I find rather deterring myself. Both seem to outweigh the advantages of the system when it comes to handling citations and cross-references or typesetting large documents, complex tables, and equations. Markdown (and pandoc) provide a simple interface to harness the power of LaTeX without having to write or know much about LaTeX (see Document compilation). 2.2.2 R code There are two ways to include R code in R Markdown documents. The primary method is to insert code chunks. ```{r code_chunk, echo = FALSE} age_mean &lt;- mean(demographics$age) ``` These chunks are enclosed in ``` and the first line defines the programming language (r, other lanugages, such as python are possible), the chunk label or name (code_chunk), and additional options (e.g., echo = FALSE). By default, papaja sets the chunk options echo = FALSE and message = FALSE globally for all chunks. echo = FALSE hides the code in each code chunk and message = FALSE hides any messages generated by the R code so that they are not included in the manuscript. Both settings can be overwritten by the user. See the knitr documentation for further chunk options. R code can also be included in a line of regular text by inserting `r ...`, where ... is the desired code to be executed. Including R code inline is a conveinient way of including the contents of variables as part of the text. For example, imagine you compute the mean and standard deviation of participants’ age and store them variables named age_mean and age_sd. You can report these numbers by printing the variables in inline R code. Participants mean age was `r age_mean` years ($SD = `r age_sd`$). In R Markdown documents, as in any other R script, code is executed serially (i.e., from top to bottom). Thus, any variables that are called in code chunks or inline R code must be defined above. 2.3 Splitting an R Markdown document Some authors may prefer to split long manuscripts into multiple component files for better clarity. There are two basic strategies to split R Markdown documents that can be combined or used in isolation: sourcing R scripts and splitting the R Markdown document. If the R Markdown document contains a lot of code, it may be helpful to disincorporate parts of the code, such as reading, merging, restructuring, and relabeling data files. The R scripts can then be executed at the respective section of the document using source(). Some authors may prefer to split long manuscripts into a master or parent document and multiple children. The master document, for example, consists of the YAML front matter and includes the children, which are themselves R Markdown documents without a YAML front matter. To include a child document, insert an empty chunk and provide the path to the R Markdown document in the chunk option child. ```{r child = &quot;introduction.Rmd&quot;} ``` ```{r child = &quot;methods.Rmd&quot;} ``` ```{r child = &quot;results.Rmd&quot;} ``` ```{r child = &quot;discussion.Rmd&quot;} ``` We hope to automate the word count in the future. For now, we recommend using the wordcountaddin package (Marwick, n.d.).↩ "],
["writing.html", "3 Writing 3.1 Workflow 3.2 Citations 3.3 Tables 3.4 Figures 3.5 Equations 3.6 Cross-referencing 3.7 Appendices", " 3 Writing 3.1 Workflow Don’t edit raw data Don’t set a working directory Generate graphics from R code Don’t edit word documents 3.1.1 Working with a reference manager Bib(La)TeX export of Mendeley Better Bib(La)TeX intergration of citr If you are not already using a reference manager such as Zotero, I strongly suggest you start doing so. Reference managers are like iTunes for your literature; they help you search, download, and organize papers. Most importantly, with a few clicks you can export a collection of references you need for a paper into a .bib-file. Once your references are in a .bib-file that resides in the same folder as your Markdown-file, you can easily add citations to your Markdown document. Each reference has a unique handle, e.g. lewandowsky_computational_2011, which you can use in Markdown. (???) creates an in-text citation; (???) creates a citation in parentheses. Everything reference-related, such as in-text citation and the reference section, will be taken cared of automatically. RStudio Section overview Spell check 3.2 Citations No manuscript is complete without citation. In order for citations to work, you need to supply a Bib(La)TeX file to the bibliography parameter in the YAML front matter (bibliography: my.bib). Once this is done, [e.g., @james_1890; @bem_2011] produces a regular citation within parentheses (e.g., ???, ???). To cite a source in text simply omit the brackets; for example, write @james_1890 to cite (???). For other options see the overview of the R Markdown citation syntax. The citation style is automatically set to APA style. If you need to use a different citation style, you can set in the YAML front matter by adding a csl parameter. See the R Markdown documentation and Citation Style Language for further details. 3.2.1 Conveiniently inserting citations with citr citr is an R package that provides functions to search Bib(La)TeX-files to create and insert formatted Markdown citations into the current document. If you use RStudio, the package supplies an easy-to-use RStudio add-in that facilitates inserting citations (Figure 3.1). The references for the inserted citations are automatically added to the documents reference section. Figure 3.1: Demonstration of the RStudio addin from the citr package that inserts R Markdown citations. Once citr is installed (install.packages(&quot;citr&quot;)) and you have restarted your R session, the addin appears in the menus and you can define a keyboard shortcut to call the addin. The addin will automatically look up the Bib(La)TeX-file(s) specified in the YAML front matter. If the document does not contain a YAML front matter the addin will attempt to locate a parent document and look up the Bib(La)TeX-file specified therein. That is, the addin works its automagic even if you edit R Markdown documents that are included as children in another R Markdown document (also see Splitting an R Markdown document). The expected names of a parent document default to c(&quot;index.Rmd&quot;, &quot;master.Rmd&quot;), it thus works with bookdown out of the box, but can be customized (e.g., options(citr.parent_documents = &quot;my_parent.Rmd&quot;)). citr can also be used without RStudio, albeit it is less convenient. The following call searches a Bib(La)TeX-file and creates formatted Markdown citations for the results. library(&quot;citr&quot;) md_cite(&quot;foo 2016&quot;, bib_file = &quot;references.bib&quot;) md_cite() searches the author, year, title, and journal fields of your references. If you are using Zotero or Juris-M citr can access your reference database directly. For this to work, you need to install the Better Bib(La)TeX extension, which I would recommend anyway. Once the extension is installed and your reference manager is running, citr will automatically access all your references and keep your Bib(La)Tex-file updated by adding missing references. If you dislike this behavior, you can disable it by setting options(citr.use_betterbiblatex = FALSE). 3.2.2 Referencing R and its packages I think it is important to credit the software we use. A lot of R packages are developed by academics free of charge. As citations are the currency of science, it’s easy to compensate volunteers for their work by citing the R packages we use. I suspect that, among other things, this is rarely done because it is tedious work. That’s why papaja makes citing R and its packages easy: r_refs(file = &quot;r-references.bib&quot;) my_citation &lt;- cite_r(file = &quot;r-references.bib&quot;) r_refs() creates a BibTeX file containing citations for R and all currently loaded packages. cite_r() takes these citations and turns them into readily reportable text. my_citation now contains the following text that you can use in your document: R (3.3.1, R Core Team, 2016) and the R-packages afex (0.16.1, Singmann et al., 2016), citr (0.2.0, Aust, 2016), DiagrammeR (0.8.4, Sveidqvist et al., 2016), dplyr (0.5.0, Wickham &amp; Francois, 2016), estimability (1.1.1, Lenth, 2015), knitr (1.15.2, Xie, 2015), lme4 (1.1.12, Bates et al., 2015), lsmeans (2.23.5, Lenth, 2016), Matrix (1.2.6, Bates &amp; Maechler, 2016), papaja (0.1.0.9456, Aust &amp; Barth, 2016), reshape2 (1.4.1, Wickham, 2007), shiny (0.13.2.9004, Chang et al., 2016), and wordcountaddin (0.1.0, Marwick, n.d.) 3.3 Tables For prettier tables, I suggest you try apa_table(), which builds on knitr’s kable(). descriptives &lt;- mixed_data %&gt;% group_by(Dosage) %&gt;% summarize( Mean = mean(Recall) , Median = median(Recall) , SD = sd(Recall) , Min = min(Recall) , Max = max(Recall) ) descriptives[, -1] &lt;- printnum(descriptives[, -1]) apa_table( descriptives , caption = &quot;Descriptive statistics of correct recall by dosage.&quot; , note = &quot;This table was created with apa_table()&quot; , escape = TRUE ) Of course popular packages like xtable2 or tables can also be used to create tables when knitting PDF documents. These packages, however, cannot be used when you want to create Microsoft Word documents because they rely on for typesetting. apa_table() creates tables that conform to APA guidelines and are correctly rendered in PDF and Word documents. But don’t get too excited. In papaja, table formatting is somewhat limited for Word documents due to missing functionality in pandoc (e.g., it is not possible to have cells or headers span across multiple columns). As required by the APA guidelines, tables are deferred to the final pages of the manuscript when creating a PDF. To place tables and figures in your text instead, set the figsintext parameter in the YAML header to yes or true, as I have done in this document. Again, this is not the case in Word documents due to limited pandoc functionality. The bottom line is, Word documents will be less polished than PDF. The resulting documents should suffice to enable collaboration with Wordy colleagues and prepare a journal submission with limited manual labor. 3.3.1 Alternatives Pixidust: https://github.com/nutterb/pixiedust/blob/master/README.md xtable: https://cran.r-project.org/web/packages/xtable/xtable.pdf tables: https://cran.r-project.org/web/packages/tables/vignettes/tables.pdf stargazer: https://cran.r-project.org/web/packages/stargazer/index.html knitr::kable Hmisc::latex https://twitter.com/polesasunder/status/464132152347475968/photo/1 3.4 Figures As usual in R Markdown, you can embed R-generated plots into your document, see . apa_beeplot( mixed_data , id = &quot;Subject&quot; , dv = &quot;Recall&quot; , factors = c(&quot;Task&quot;, &quot;Valence&quot;, &quot;Dosage&quot;) , dispersion = conf_int , ylim = c(0, 30) , las = 1 , args_points = list(cex = 1.5) , args_arrows = list(length = 0.025) ) Again, as required by the APA guidelines, figures are deferred to the final pages of the document unless you set figsintext to yes. barplot lineplot violinplot/beeswarm Be sure to also check out apa_barplot() and apa_beeplot() if you work with factorial designs. If you prefer creating your plots with ggplot2 try theme_apa(). 3.5 Equations If you need to report formulas, you can use the flexible syntax (it will work in Word documents, too). Inline math must be enclosed in $ or \\( and \\) and the result will look like this: \\(d&#39; = z(H) - z(FA)\\). For larger formulas displayed equations are more appropriate; they are enclosed in $$ or \\[and \\], \\[ d&#39; = \\frac{\\mu_{old} - \\mu_{new}}{\\sqrt{0.5(\\sigma^2_{old} + \\sigma^2_{new})}}. \\] 3.6 Cross-referencing papaja builds on the document formats pdf_document2() and word_document2() from the bookdown package. This enables the use of bookdown cross-referencing syntax including automatically generated table and figure labels as detailed in the bookdown documentation. 3.7 Appendices References "],
["reporting.html", "4 Reporting 4.1 Reporting statistics 4.2 Caching", " 4 Reporting 4.1 Reporting statistics Figure 4.1: Process diagram illustrating the use of apa_print() methods and apa_table() to format results from statistical analyses according to APA guidelines. The formatted text and tables can be reported in a manuscript. in_paren() printnum() printp() inline hook 4.1.1 htest (t-tests, correlations, etc.) 4.1.2 lm (linear regression) 4.1.2.1 anova (model comparisons) 4.1.3 anova, Anova, Anova.mlm (ANOVA) 4.1.3.1 glht, lsmeans, ref.grid (post-hoc tests) The functions apa_print() and apa_table() facilitate reporting results of your analyses. Take a look at the .Rmd of the example manuscript in the folder example and the resulting .pdf. Drop a supported analysis result, such as an htest- or lm-object, into apa_print() and receive a list of possible character strings that you can use to report the results of your analysis. my_lm &lt;- lm(Sepal.Width ~ Sepal.Length + Petal.Width + Petal.Length, data = iris) apa_lm &lt;- apa_print(my_lm) One element of this list is apa_lm$table that, in the case of an lm-object, will contain a complete regression table. Pass apa_lm$table to apa_table() to turn it into a proper table in your PDF or Word document (remember to set the chunk option results = &quot;asis&quot;). apa_table(apa_lm$table, caption = &quot;Iris regression table.&quot;) Table. Iris regression table. Predictor \\(b\\) 95% CI \\(t(146)\\) \\(p\\) Intercept 1.04 \\([0.51\\), \\(1.58]\\) 3.85 &lt; .001 Sepal Length 0.61 \\([0.48\\), \\(0.73]\\) 9.77 &lt; .001 Petal Width 0.56 \\([0.32\\), \\(0.80]\\) 4.55 &lt; .001 Petal Length -0.59 \\([-0.71\\), \\(-0.46]\\) -9.43 &lt; .001 papaja currently provides methods for the following object classes: A A-L L-S S afex_aov aovlist lm summary.aovlist anova glht lsmobj summary.glht Anova.mlm htest summary.Anova.mlm summary.lm aov list summary.aov summary.ref.grid Any output from R is included as you usually would using R Markdown. By default the R code will not be displayed in the final documents. If you wish to show off your code you need to set echo = TRUE in the chunk options. 4.1.4 Report statistical analyses apa_print() will help you report the results of your statistical analyses. The function will format the contents of R objects and produce readily reportable text. recall_anova &lt;- afex::aov_car( Recall ~ (Task * Valence * Dosage) + Error(Subject/(Task * Valence)) + Dosage , data = mixed_data , type = 3 ) recall_anova_results &lt;- apa_print(recall_anova, es = &quot;pes&quot;) recall_anova_results_p &lt;- apa_print(recall_anova, es = &quot;pes&quot;, in_paren = TRUE) Now, you can report the results of your analyses like so: Item valence (`r anova_results_p$full$Valence`) and the task affected recall performance, `r anova_results$full$Task`; the dosage, however, had no effect on recall, `r anova_results$full$Dosage`. There was no significant interaction. Item valence () and the task affected recall performance, ; > the dosage, however, had no effect on recall, . > There was no significant interaction. --> What’s even more fun, you can easily create a complete ANOVA table using by passing recall_anova_results$table to apa_table(), see . apa_table( recall_anova_results$table , align = c(&quot;l&quot;, &quot;r&quot;, &quot;c&quot;, &quot;r&quot;, &quot;r&quot;, &quot;r&quot;) , caption = &quot;ANOVA table for the analyis of the example data set. \\\\label{ref:anova}&quot; , note = &quot;This is a table created using apa\\\\_print() and apa\\\\_table().&quot; ) 4.2 Caching "],
["collaborative-writing.html", "5 Collaborative writing", " 5 Collaborative writing "],
["publishing-manuscripts.html", "6 Publishing manuscripts 6.1 Published papers written using papaja", " 6 Publishing manuscripts 6.1 Published papers written using papaja Although papaja is not yet on CRAN and is still undergoing a lot of changes, there are peer-reviewed publications that use it. If you have published a paper that was written with papaja, let me know and I will add it to this list. Stahl, C., Barth, M., &amp; Haider, H. (2015). Distorted estimates of implicit and explicit learning in applications of the process-dissociation procedure to the SRT task. Consciousness &amp; Cognition, 37, 27–43. doi: 10.1016/j.concog.2015.08.003 Aust, F., &amp; Edwards, J. D. (2016). Incremental validity of Useful Field of View subtests for the prediction of Instrumental Activities of Daily Living. Journal of Clinical and Experimental Neuropsychology, 38, 497-515. doi: 10.1080/13803395.2015.1125453 Stahl, C., Haaf, J., &amp; Corneille, O. (2016). Subliminal Evaluative Conditioning? Above-Chance CS Identification May Be Necessary and Insufficient for Attitude Learning. Journal of Experimental Psychology: General, 27. doi: 10.1037/xge0000191 Stahl, C. &amp; Heycke, T. (2016). Evaluative Conditioning with Simultaneous and Sequential Pairings Under Incidental and Intentional Learning Conditions. Social Cognition, 34, 382-412. doi: 10.1521/soco.2016.34.5.382 "],
["limitations.html", "7 Limitations 7.1 MS word caveat", " 7 Limitations 7.1 MS word caveat apa_table() etc. Checklist The references in Word violate the APA guidelines in that there is no hanging indentation (i.e. indentation of all lines but the first one). As of now there is no fix for this problem. In-text citation incorrectly use ampersands instead of “and”. This is a current limitation of the pandoc-citeproc filter. I’m still looking for ways to fix this. Citations may mess with RStudios syntax highlighting in the current line. Incorrect highlighting following a citation does not necessarily indicate incorrect syntax. Printing PDF from RStudio’s PDF viewer can produce weird results. If you want to print your manuscript I suggest you use any other PDF viewer of your choice. "],
["future-directions.html", "8 Future directions 8.1 Contributions", " 8 Future directions 8.1 Contributions Like papaja and want to contribute? Take a look at the open issues if you need inspiration. Other than that, there are many output objects from analysis methods that we would like apa_print() to support. Any new S3-methods for this function are always appreciated (e.g., glm, factanal, fa, lavaan, BFBayesFactor). 8.1.1 Workflow Commit messages: http://chris.beams.io/posts/git-commit/ 8.1.2 Wanted Automated word count "],
["references.html", "References", " References "]
]
